import swagger, { FastifyDynamicSwaggerOptions } from '@fastify/swagger';
import swaggerUi, { FastifySwaggerUiOptions } from '@fastify/swagger-ui';
import { FastifyInstance } from 'fastify';
import fastifyPlugin from 'fastify-plugin';

/**
 * Swagger plugin options
 */
export interface SwaggerPluginOptions {
  swagger?: {
    enabled?: boolean;
    openapi?: FastifyDynamicSwaggerOptions['openapi'];
    refResolver?: FastifyDynamicSwaggerOptions['refResolver'];
    transform?: FastifyDynamicSwaggerOptions['transform'];
    transformObject?: FastifyDynamicSwaggerOptions['transformObject'];
  };
  swaggerUi?: {
    enabled?: boolean;
    routePrefix?: string;
    uiConfig?: FastifySwaggerUiOptions['uiConfig'];
    uiHooks?: FastifySwaggerUiOptions['uiHooks'];
    staticCSP?: boolean;
    transformStaticCSP?: FastifySwaggerUiOptions['transformStaticCSP'];
    transformSpecification?: FastifySwaggerUiOptions['transformSpecification'];
    transformSpecificationClone?: boolean;
  };
}

/**
 * Default Swagger configuration
 */
const defaultSwaggerConfig: FastifyDynamicSwaggerOptions = {
  openapi: {
    info: {
      title: 'Fastify API',
      description: 'API documentation generated by Fastify Kick-Start',
      version: '1.0.0',
    },
    servers: [
      {
        url: 'http://localhost:3000',
        description: 'Development server',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
        apiKey: {
          type: 'apiKey',
          in: 'header',
          name: 'X-API-Key',
        },
      },
    },
    security: [],
  },
  refResolver: {
    buildLocalReference(json, _baseUri, _fragment, i) {
      return json['$id']?.toString() || `def-${i}`;
    },
  },
};

/**
 * Default Swagger UI configuration
 */
const defaultSwaggerUiConfig: FastifySwaggerUiOptions = {
  routePrefix: '/docs',
  uiConfig: {
    docExpansion: 'list',
    deepLinking: true,
    defaultModelsExpandDepth: 1,
    defaultModelExpandDepth: 1,
    displayOperationId: false,
    displayRequestDuration: true,
    filter: false,
    showExtensions: false,
    showCommonExtensions: false,
    tryItOutEnabled: true,
  },
  staticCSP: true,
  transformSpecificationClone: true,
};

/**
 * Swagger plugin for automatic API documentation
 * 
 * This plugin sets up Swagger/OpenAPI documentation for your Fastify application.
 * It automatically generates documentation based on your route schemas and provides
 * an interactive UI for testing endpoints.
 * 
 * Features:
 * - Automatic OpenAPI 3.0 spec generation
 * - Interactive Swagger UI
 * - Support for authentication schemes
 * - Customizable documentation
 * - Schema validation integration
 */
async function swaggerPlugin(
  fastify: FastifyInstance,
  options: SwaggerPluginOptions = {}
): Promise<void> {
  const {
    swagger: swaggerOpts = {},
    swaggerUi: swaggerUiOpts = {},
  } = options;

  // Register Swagger documentation generator
  if (swaggerOpts.enabled !== false) {
    const swaggerConfig: FastifyDynamicSwaggerOptions = {
      ...defaultSwaggerConfig,
      ...swaggerOpts,
      openapi: {
        ...defaultSwaggerConfig.openapi,
        ...swaggerOpts.openapi,
        info: {
          ...defaultSwaggerConfig.openapi?.info,
          ...swaggerOpts.openapi?.info,
        },
        servers: swaggerOpts.openapi?.servers || defaultSwaggerConfig.openapi?.servers,
        components: {
          ...defaultSwaggerConfig.openapi?.components,
          ...swaggerOpts.openapi?.components,
          securitySchemes: {
            ...defaultSwaggerConfig.openapi?.components?.securitySchemes,
            ...swaggerOpts.openapi?.components?.securitySchemes,
          },
        },
      },
    };

    await fastify.register(swagger, swaggerConfig);
    fastify.log.info('Swagger documentation registered');
  }

  // Register Swagger UI
  if (swaggerUiOpts.enabled !== false) {
    const swaggerUiConfig: FastifySwaggerUiOptions = {
      ...defaultSwaggerUiConfig,
      ...swaggerUiOpts,
      uiConfig: {
        ...defaultSwaggerUiConfig.uiConfig,
        ...swaggerUiOpts.uiConfig,
      },
    };

    await fastify.register(swaggerUi, swaggerUiConfig);
    
    const routePrefix = swaggerUiConfig.routePrefix || '/docs';
    fastify.log.info(`Swagger UI available at ${routePrefix}`);
  }
}

/**
 * Helper function to create common security schemes
 */
export const createSecuritySchemes = () => ({
  bearerAuth: {
    type: 'http',
    scheme: 'bearer',
    bearerFormat: 'JWT',
    description: 'JWT Bearer token authentication',
  },
  apiKey: {
    type: 'apiKey',
    in: 'header',
    name: 'X-API-Key',
    description: 'API Key authentication',
  },
  basicAuth: {
    type: 'http',
    scheme: 'basic',
    description: 'Basic HTTP authentication',
  },
  oauth2: {
    type: 'oauth2',
    flows: {
      authorizationCode: {
        authorizationUrl: '/oauth/authorize',
        tokenUrl: '/oauth/token',
        scopes: {
          read: 'Read access',
          write: 'Write access',
          admin: 'Admin access',
        },
      },
    },
    description: 'OAuth 2.0 authentication',
  },
});

/**
 * Helper function to create common response schemas
 */
export const createCommonSchemas = () => ({
  Error: {
    type: 'object',
    properties: {
      statusCode: { type: 'integer' },
      error: { type: 'string' },
      message: { type: 'string' },
    },
    required: ['statusCode', 'error', 'message'],
  },
  ValidationError: {
    type: 'object',
    properties: {
      statusCode: { type: 'integer', example: 400 },
      error: { type: 'string', example: 'Bad Request' },
      message: { type: 'string', example: 'Validation failed' },
      validation: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            instancePath: { type: 'string' },
            schemaPath: { type: 'string' },
            keyword: { type: 'string' },
            params: { type: 'object' },
            message: { type: 'string' },
          },
        },
      },
    },
    required: ['statusCode', 'error', 'message'],
  },
  Success: {
    type: 'object',
    properties: {
      success: { type: 'boolean', example: true },
      message: { type: 'string' },
    },
    required: ['success'],
  },
});

/**
 * Export as Fastify plugin
 */
export const swaggerPluginFactory = fastifyPlugin(swaggerPlugin, {
  name: 'fastify-kick-start-swagger',
  fastify: '5.x',
});

export { swaggerPlugin };
